//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Action Map/ActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ActionMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ActionMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ActionMap"",
    ""maps"": [
        {
            ""name"": ""MainMenu"",
            ""id"": ""64eeeb98-43de-42fe-8c40-5e7a6f2fff1e"",
            ""actions"": [
                {
                    ""name"": ""Escape Key"",
                    ""type"": ""Button"",
                    ""id"": ""a6d5741c-869a-4705-b209-1ca2ddcd65af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""68919e81-58fb-4f14-a760-7070bad78249"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Main Game"",
            ""id"": ""07128526-f56a-4734-a173-7a22512fff0d"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": []
}");
        // MainMenu
        m_MainMenu = asset.FindActionMap("MainMenu", throwIfNotFound: true);
        m_MainMenu_EscapeKey = m_MainMenu.FindAction("Escape Key", throwIfNotFound: true);
        // Main Game
        m_MainGame = asset.FindActionMap("Main Game", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainMenu
    private readonly InputActionMap m_MainMenu;
    private List<IMainMenuActions> m_MainMenuActionsCallbackInterfaces = new List<IMainMenuActions>();
    private readonly InputAction m_MainMenu_EscapeKey;
    public struct MainMenuActions
    {
        private @ActionMap m_Wrapper;
        public MainMenuActions(@ActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @EscapeKey => m_Wrapper.m_MainMenu_EscapeKey;
        public InputActionMap Get() { return m_Wrapper.m_MainMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMenuActions set) { return set.Get(); }
        public void AddCallbacks(IMainMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MainMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainMenuActionsCallbackInterfaces.Add(instance);
            @EscapeKey.started += instance.OnEscapeKey;
            @EscapeKey.performed += instance.OnEscapeKey;
            @EscapeKey.canceled += instance.OnEscapeKey;
        }

        private void UnregisterCallbacks(IMainMenuActions instance)
        {
            @EscapeKey.started -= instance.OnEscapeKey;
            @EscapeKey.performed -= instance.OnEscapeKey;
            @EscapeKey.canceled -= instance.OnEscapeKey;
        }

        public void RemoveCallbacks(IMainMenuActions instance)
        {
            if (m_Wrapper.m_MainMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MainMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainMenuActions @MainMenu => new MainMenuActions(this);

    // Main Game
    private readonly InputActionMap m_MainGame;
    private List<IMainGameActions> m_MainGameActionsCallbackInterfaces = new List<IMainGameActions>();
    public struct MainGameActions
    {
        private @ActionMap m_Wrapper;
        public MainGameActions(@ActionMap wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_MainGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainGameActions set) { return set.Get(); }
        public void AddCallbacks(IMainGameActions instance)
        {
            if (instance == null || m_Wrapper.m_MainGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainGameActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IMainGameActions instance)
        {
        }

        public void RemoveCallbacks(IMainGameActions instance)
        {
            if (m_Wrapper.m_MainGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainGameActions instance)
        {
            foreach (var item in m_Wrapper.m_MainGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainGameActions @MainGame => new MainGameActions(this);
    public interface IMainMenuActions
    {
        void OnEscapeKey(InputAction.CallbackContext context);
    }
    public interface IMainGameActions
    {
    }
}
